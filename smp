#!/usr/bin/env python
import re
import csv
from pathlib import Path
from select import select  # for non-blocking input, Unix only
from sys import stdin, platform
import smp_queue as q
from smp_queue import Player, queue
from smp_common import timestamp, gen_files, ac_songs, autocomplete
import parser
from smp_help import ihelp
from settings import Settings, config, reload_cfg
import macros
from macros import macro
from time import sleep

import mutagen  # for getting song duration
import pygame
from pygame import mixer
from pygame.mixer import music

CONFIG_PATH = Path("~/.config/smp/smp.conf").expanduser()
SUPPORTED_TYPES = ["mp3", "ogg", "wav", "flac", "opus"]
CMDS = {
    "config": lambda *args: config(*args),
    "delete": lambda *args: delete(*args),
    "exit": lambda *args: smp_exit(),
    "forward": lambda *args: seek_relative(*args, forward=True),
    "help": lambda *args: ihelp(*args),
    "list": lambda *args: ls(*args),
    "loop": lambda *args: loop(),
    "ls": lambda *args: ls(*args),
    "macro": lambda *args: macro(*args),
    "pause": lambda *args: pause(),
    "play": lambda *args: play(*args),
    "queue": lambda *args: queue(*args),
    "quit": lambda *args: smp_exit(),
    "rename": lambda *args: rename(*args),
    "repeat": lambda *args: repeat(*args),
    "rewind": lambda *args: seek_relative(*args),
    "seek": lambda *args: seek_absolute(*args),
    "stop": lambda *args: stop(),
    "time": lambda *args: time(),
    "unpause": lambda *args: unpause(),
    "volume": lambda *args: volume(*args),
}


def is_valid_cmd(cmd, cmd_set):
    commands = [c for c in cmd_set if c.startswith(cmd)]
    if len(commands) == 1:
        return commands[0]


def should_repeat():
    if not (music.get_busy() or Player.should_pause) and Player.repeats:
        Player.repeats -= 1
        return True


def repeat(*args):
    cur_song = Path(Player.cur_song).stem
    if not args:
        Player.repeats = 1
        print(f"{cur_song} will be repeated {Player.repeats} times.")
        return
    repeats = type_converter(args[0], int, "Repeats must be an integer")
    if not isinstance(repeats, int) or repeats < 1:
        return
    Player.repeats = repeats
    print(f"{cur_song} will be repeated {Player.repeats} times.")


if platform == "win32":
    import msvcrt

    def input_entered(string=[""]):
        if msvcrt.kbhit():
            ch = msvcrt.getch()
            if ch in (b"\x00", b"\xe0"):
                msvcrt.getch()
            if ch == b"\x08":
                if len(string[0]) != 0:
                    string[0] = string[0][:-1]
                    print(end="\b \b", flush=True)
            elif ch != b"\r":
                string[0] += ch.decode()
                print(end=ch.decode(), flush=True)
            else:
                res = string[0]
                print()
                if not res:
                    print(end=Settings.prompt, flush=True)
                string[0] = ""
                return res
        return False  # Fix windows bug where prompt would continually print
else:

    def input_entered():
        # Check if user has entered a newline
        # and return stdin if true
        stdin_is_ready = select([stdin], [], [], 0)[0]
        if stdin_is_ready:
            return stdin_is_ready[0].readline().strip()
        return False


def clamp(num, low, high):
    return min(max(num, low), high)


def type_converter(data, type_, err_msg):
    try:
        return type_(data)
    except ValueError:
        print(err_msg)


def parse_input(string):
    commands = string.strip(";").split(";")
    # str.split is insufficient for our needs as we need to be able to parse
    # strings with spaces in them
    out = []
    accumulator = ""
    quoted = False
    for i, command in enumerate(commands):
        out.append([])
        for idx, ch in enumerate(command):
            if ch in ('"', "'"):
                quoted ^= True
            elif ch == " ":
                if quoted:
                    accumulator += ch
                elif accumulator:
                    out[i].append(accumulator.strip())
                    accumulator = ""
            else:
                accumulator += ch
        out[i].append(accumulator.strip())
        accumulator = ""
    return out


def play(*args):
    if not args:
        ihelp("play")
        return
    if len(args) >= 1:
        song = args[0]
    if len(args) >= 2:
        Player.volume = type_converter(
            args[1], float, "Volume needs to be between 0 and 100"
        )
    if len(args) >= 3:
        Player.loops = type_converter(
            args[2], int, "Number of loops must be an integer"
        )
    if Player.volume is None or Player.loops is None:
        return

    try:
        music.load(Settings.music_dir / song)
    except (pygame.error, FileNotFoundError):
        file = song
        song = ac_songs(Settings.autocomplete, song)
        if not song:
            return
        else:
            Player.playing_queue = False
            music.load(Settings.music_dir / song)
    if Settings.music_dir / song != Player.cur_song:
        Player.repeats = 0
    Player.cur_song = Settings.music_dir / song
    music.set_volume(Player.volume / 100)
    music.play(Player.loops)
    file = mutagen.File(Player.cur_song)
    Player.duration = file.info.length
    Player.loops = 0
    Player.offset = 0
    Player.should_pause = False


def volume(*args):
    if not args:
        print(f"Volume: {Player.volume}%")
    elif len(args) == 1:
        Player.volume = type_converter(
            args[0], float, "Volume needs to be between 0 and 100"
        )
        music.set_volume(Player.volume / 100)


def ls(*args):
    ls_args = _ls_collect_args(*args)
    if ls_args is None:
        return
    songs = _ls_parse_args(ls_args)
    print(Settings.ls_sep.join(songs))


def _ls_collect_args(*args):
    ls_args = []
    arg_str = ""
    for arg in args:
        if arg.startswith("-"):
            if arg[1:].isdigit():
                # Don't confuse negative numbers with flags
                arg_str += arg.strip()
                continue
            if arg_str:
                ls_args.append(arg_str)
                arg_str = ""
            ls_args.append(arg)
        else:
            arg_str += arg.strip()
    if arg_str:
        ls_args.append(arg_str)
    if len(ls_args) % 2 != 0:
        print("Malformed arguments")
        return
    return ls_args


def _ls_parse_args(ls_args):
    files = gen_files()
    files.sort()
    humanized = [song[: song.index(".")] for song in files]
    i_arg = iter(ls_args)
    while True:
        try:
            flag, val = next(i_arg), next(i_arg)
        except StopIteration:
            break
        flag = flag.lower()
        if flag not in ("-s", "-n"):
            print(f"Invalid flag {flag}")
            continue
        if flag == "-n":
            vals = list(map(lambda x: int(str.strip(x)), val.split(",")))
            idxs = slice(*vals)
            humanized = humanized[idxs]
        elif flag == "-s":
            tmp = []
            found = False
            for song in humanized:
                if not song.startswith(val):
                    if not found:
                        continue
                    break
                tmp.append(song)
                found = True
            humanized = tmp
            del tmp
    return humanized


def loop():
    if Player.loops > 0:
        Player.loops = 0
    Player.loops = ~Player.loops
    if Player.loops:
        print("Loop: on")
    else:
        print("Loop: off")
    start = music.get_pos() / 1000
    if music.get_busy() or Player.should_pause:
        music.pause()
        music.play(Player.loops, (start + Player.offset) % Player.duration)
        Player.offset += start
    if Player.should_pause:
        music.pause()


def time():
    if Player.duration == 0:
        print("Nothing playing")
        return
    cur_time = music.get_pos() / 1000 + Player.offset
    time = cur_time % Player.duration
    if not music.get_busy():
        if not Player.should_pause or (abs(time - Player.duration)) < 0.5:
            print("Nothing playing")
            return
    print(
        f"{timestamp(int(time))} elapsed, "
        f"{timestamp(int(Player.duration - time))} remaining"
    )


def seek_relative(*args, forward=False):
    if not args:
        if forward:
            ihelp("forward")
        else:
            ihelp("rewind")
        return
    if not Player.duration:
        print("Nothing playing")
        return
    start = music.get_pos() / 1000 + Player.offset
    secs = args[0]
    try:
        float(secs)
    except ValueError:
        secs = timestamp_as_num(secs)
        if not secs:
            print("Expected either a number in seconds or a timestamp")
            return
    if not forward:
        time = clamp(float(secs), 0, start)
        Player.offset = new_time = start - time
    else:
        time = clamp(float(secs), 0, Player.duration - start - 0.1)
        Player.offset = new_time = start + time
    new_time %= Player.duration
    Player.offset %= Player.duration
    music.pause()
    music.play(Player.loops, new_time)
    if Player.should_pause:
        music.pause()


def seek_absolute(*args):
    if not args:
        ihelp("seek")
        return
    if not Player.duration:
        print("Nothing playing")
        return
    time = args[0]
    try:
        float(time)
    except ValueError:
        time = timestamp_as_num(time)
        if not time:
            print("Expected either a number in seconds or a timestamp")
            return
    time = clamp(float(time), 0, Player.duration - 0.1)
    Player.offset = time
    music.pause()
    music.play(Player.loops, time)
    if Player.should_pause:
        music.pause()


def pause():
    Player.should_pause = ~Player.should_pause
    if Player.should_pause:
        music.pause()
    else:
        music.unpause()


def stop():
    music.stop()
    music.unload()
    Player.cur_song = ""
    Player.playing_queue = False


def unpause():
    music.unpause()
    Player.should_pause = False


def smp_exit():
    music.unload()
    mixer.quit()
    exit(0)


def timestamp_as_num(ts):
    secs = 0
    hms = re.compile(r"^[1-9]{1,2}:[0-5][0-9]:[0-5][0-9]$")
    ms = re.compile(r"^[0-5][0-9]?:[0-5][0-9]$")
    if re.match(hms, ts) or re.match(ms, ts):
        ts = ts.split(":")
        ts.reverse()
        ts = list(map(int, ts))
        for idx, num in enumerate(ts):
            secs += num * (60**idx)
        return secs


def parse_and_execute(cmd, cmd_set):
    cmd = cmd.replace(";;", ";")
    commands = parse_input(cmd)
    for command in commands:
        cmd, *args = command
        if not cmd:
            continue
        if cmd in cmd_set:
            cmd_set[cmd](*args)
        else:
            autocomplete(Settings.autocomplete, cmd, cmd_set, *args)


def stat_config(cfg_last_modified):
    cfg_mtime = CONFIG_PATH.stat().st_mtime
    if cfg_mtime != cfg_last_modified:
        reload_cfg(startup=False)  # Hot reloading
        return cfg_mtime
    return cfg_last_modified


def exec_commands(commands, macros):
    args_list = []
    commands = list(map(str.strip, commands))
    for idx, cmd in enumerate(commands):
        cmd, *args = cmd.split()
        if command := is_valid_cmd(cmd, CMDS):
            # Make normal commands take precedence over macros
            args_list.append(" ".join((command.strip(), *args)))
        elif mcr := is_valid_cmd(cmd, macros):
            commands[idx] = macros[mcr]
            # Whenever we see a macro, we need to expand it to actual
            # commands, then we feed it back into this function
            commands = "; ".join(commands).split(';')
            commands[idx] += f' {" ".join(args)}'
            # Don't forget to add the arguments
            return exec_commands(commands, macros)
            # Recursion allows macros of arbitrary depth
            # i.e. macros that call other macros that
            # call other macros ...
        else:
            print(f"Invalid command {cmd}")
    parse_and_execute("; ".join(args_list), CMDS)


def rename(*args):
    if not args:
        ihelp("rename")
        return
    if len(args) % 2 != 0:
        print("Expected an even number of arguments")
        return
    for i in range(0, len(args), 2):
        first, second = args[i], args[i+1]
        first = ac_songs(Settings.autocomplete, first)
        if not first:
            continue
        first_path = Settings.music_dir / first
        sfx = first_path.suffix
        second_path = (Settings.music_dir /
                       second).with_suffix(sfx)
        first_path.rename(second_path)
        for file in Settings.playlist_dir.glob("*.csv"):
            with open(file, 'r', newline="") as f:
                reader = csv.reader(f, delimiter=",")
                queue = next(iter(reader))
            if first in queue:
                queue[queue.index(first)] = second_path.name
                tmp = Player.queue.copy()
                Player.queue = queue
                q.save(file.with_suffix("").name)
                Player.queue = tmp
                del tmp


def delete(*args):
    if not args:
        ihelp("delete")
        return
    for arg in args:
        song = ac_songs(Settings.autocomplete, arg)
        if not song:
            continue
        song_path = Settings.music_dir / song
        for file in Settings.playlist_dir.glob("*.csv"):
            with open(file, 'r', newline="") as f:
                reader = csv.reader(f, delimiter=",")
                queue = next(iter(reader))
            if song in queue:
                queue.remove(song)
                tmp = Player.queue
                Player.queue = queue
                q.save(file.with_suffix("").name)
                Player.queue = tmp
                del tmp
        if song in Player.queue:
            parse_and_execute(f"queue remove {song}", CMDS)
    song_path.unlink()


def main():
    Player.macros = macros.load_macros()
    Settings.read_config(parser.get_config(CONFIG_PATH))
    cfg_last_modified = CONFIG_PATH.stat().st_mtime
    mixer.init()
    failed_calls = 0
    print(end=Settings.prompt, flush=True)
    while True:
        try:
            cfg_last_modified = stat_config(cfg_last_modified)
            failed_calls = 0
        except FileNotFoundError:
            failed_calls += 1
            # Sometimes the config file is not recognized,
            # so we just need to wait.
            if failed_calls > 10000:
                print("CRITICAL: Config file not found!")
                config(generate=True)
                # Other times it really doesn't exist, likely because
                # it's been moved or deleted
            continue
        sleep(0.01)
        # Drastically reduces CPU usage with almost no performance hit
        if should_repeat() and Player.cur_song:
            # Fix bug where it would try to play immediately after being
            # stopped
            play(Player.cur_song)
        if q.should_advance():
            q.play()
        command = input_entered()
        if command is False:
            continue
        elif not command:
            print(end=Settings.prompt, flush=True)
        else:
            cmd, *args = command.lower().split()
            if is_valid_cmd(cmd, CMDS) == "macro":
                CMDS["macro"](*args)  # Special case as splitting by ';' breaks
                # add_macro
            else:
                commands = " ".join((cmd, *args)).split(";")
                exec_commands(commands, Player.macros)
            print(end=Settings.prompt, flush=True)


if __name__ == "__main__":
    main()
